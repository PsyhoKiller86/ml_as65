# -*- coding: utf-8 -*-
"""OMOLab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vvo6ykLMmAq8uoVyMdyfetCkAnjbppad
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep=r"\s+", skiprows=22, header=None)

data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

feature_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE',
                 'DIS', 'RAD', 'TAX', 'PTRATIO', 'N', 'LSTAT']

df = pd.DataFrame(data, columns=feature_names)
df['MEDV'] = target

df.head()

correlation_matrix = df.corr().round(2)

plt.figure(figsize=(9, 9))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title("Матрица корреляции признаков Boston Housing")
plt.tight_layout()
plt.show()

correlation_with_target = correlation_matrix['MEDV'].sort_values(ascending=False)

most_important_feature = correlation_with_target.index[1]
correlation_value = correlation_with_target.iloc[1]

print(f"САМЫЙ ВАЖНЫЙ ПРИЗНАК ДЛЯ ЦЕНЫ: '{most_important_feature}'")
print(f"КОРРЕЛЯЦИЯ: {correlation_value}")

correlation_with_target = df.corr()['MEDV'].sort_values(ascending=False)
most_correlated_feature = correlation_with_target.index[1]
highest_correlation = correlation_with_target.iloc[1]

plt.figure(figsize=(10, 6))
plt.scatter(df[most_correlated_feature], df['MEDV'], alpha=0.7, edgecolors='w', linewidth=0.5)
plt.xlabel(most_correlated_feature)
plt.ylabel('MEDV')
plt.title(f'Зависимость стоимости дома от {most_correlated_feature}\n(Корреляция: {highest_correlation:.2f})')

z = np.polyfit(df[most_correlated_feature], df['MEDV'], 1)
p = np.poly1d(z)
plt.plot(df[most_correlated_feature], p(df[most_correlated_feature]), "r--", alpha=0.8)

plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

df_normalized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)

print(df_normalized.head())

plt.figure(figsize=(10, 6))
plt.hist(df['CRIM'], bins=30, edgecolor='black', alpha=0.7, color='skyblue')
plt.xlabel('Уровень преступности (CRIM)')
plt.ylabel('Количество районов')
plt.title('Распределение уровня преступности в Бостоне')
plt.grid(True, alpha=0.3)
plt.show()