# -*- coding: utf-8 -*-
"""OMOLab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TCfy1ZpLdbxVS1E71s7OOoBqRmJsYr8F
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score

url = "https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv"
data = pd.read_csv(url)

print("Размер данных:", data.shape)
print(data.head())

data_encoded = pd.get_dummies(data, drop_first=True)

X = data_encoded.drop("charges", axis=1)
y = data_encoded["charges"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MAE (Средняя абсолютная ошибка): {mae:.2f}")
print(f"R2 (Коэффициент детерминации): {r2:.4f}")

plt.figure(figsize=(8,6))
sns.scatterplot(x=data["bmi"], y=data["charges"], alpha=0.6)

sns.regplot(x=data["bmi"], y=data["charges"], scatter=False, color="red")

plt.xlabel("Индекс массы тела (BMI)")
plt.ylabel("Медицинские расходы (charges)")
plt.title("Зависимость расходов от BMI")
plt.show()

url = "https://raw.githubusercontent.com/sharmaroshan/Heart-UCI-Dataset/master/heart.csv"
data = pd.read_csv(url)

print("Размер данных:", data.shape)
print(data.head())

X = data.drop("target", axis=1)
y = data["target"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Accuracy:  {acc:.4f}")
print(f"Precision: {prec:.4f}")
print(f"Recall:    {rec:.4f}")
print(f"F1-score:  {f1:.4f}")

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=["Нет болезни", "Есть болезнь"],
            yticklabels=["Нет болезни", "Есть болезнь"])
plt.xlabel("Предсказанный класс")
plt.ylabel("Фактический класс")
plt.title("Матрица ошибок")
plt.show()